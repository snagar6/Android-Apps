package com.example.malwarenativeapp;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.util.ArrayList;
import android.util.Log;
import com.example.malwarenativeapp.Shell;
import com.example.malwarenativeapp.Shell.ShellException;

public class RunScript {
    private String command;
    private String stdout;
    private String stderr;
    private int retvalue;
    
    // Shreyas
    public static String currUid;

    public RunScript (String command) {
        this.command = command;
        
        // Shreyas
        this.currUid = "";
    }

    public static String runIt (String command) {  
    	return new RunScript(command).run(); 
    }

    // SHREYAS - Checking for root access - cmdline ....
    public static String runItRoot (String command) {    	
    	return new RunScript(command).canRunRootCommands();
    }
    
    public static String runOtherRootCommands (String command) {    	
    	return new RunScript(command).canRunRootOtherCommands(command);
    }
    

    public String run() {
        String sRet = "";
        try {
            // Runtime rt = Runtime.getRuntime();
            // rt.runFinalizersOnExit(true);
            // Process m_process=rt.exec(this.CMD);
        
        	
            final Process m_process = Runtime.getRuntime().exec(this.command);
            // System.out.println("start");
            final StringBuilder sbread = new StringBuilder();
            Thread tout = new Thread(new Runnable() {
                public void run() {
                    BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(m_process
                            .getInputStream()), 8192);
                    String ls_1 = null;
                    try {
                        while ((ls_1 = bufferedReader.readLine()) != null) {
                            sbread.append(ls_1).append("\n");
                        }
                    } catch (IOException e) {
                        e.printStackTrace();
                    } finally {
                        try {
                            bufferedReader.close();
                        } catch (IOException e) {
                            // ignore
                        }
                    }
                }
            });
            tout.start();
            final StringBuilder sberr = new StringBuilder();
            Thread terr = new Thread(new Runnable() {
                public void run() {
                    BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(m_process
                            .getErrorStream()), 8192);
                    String ls_1 = null;
                    try {
                        while ((ls_1 = bufferedReader.readLine()) != null) {
                            sberr.append(ls_1).append("\n");
                        }
                    } catch (IOException e) {
                        e.printStackTrace();
                    } finally {
                        try {
                            bufferedReader.close();
                        } catch (IOException e) {
                            // ignore
                        }
                    }
                }
            });
            terr.start();
            // System.out.println("wait");
            this.retvalue = m_process.waitFor();
            while (tout.isAlive()) {
                Thread.sleep(50);
            }
            // System.out.println("output:\n"+sbread.toString());
            if (terr.isAlive()) terr.interrupt();
            // System.out.println("error:\n"+sberr.toString());
            this.stdout = sbread.toString();
            this.stderr = sberr.toString();
            sRet = this.stdout + this.stderr;
        } catch (java.io.IOException ee) {
            System.err.println("RunScript have a IO error :" + ee.getMessage());
            return ("IO Error");
            // return null;
        } catch (InterruptedException ie) {
            System.err.println("RunScript have a interrupte error:" + ie.getMessage());
            return ("Intr Error");
            // return null;
        } catch (Exception ex) {
            System.err.print("RunScript have a error :" + ex.getMessage());
            return ("Excp Err");
            // return null;
        }
        
        currUid = sRet;
        return sRet;
    }
    
    
    // RUN ROOT Check ...
    
    public static String canRunRootCommands()
    {
      String retval = "nope -  no ROOT! #1";
      Process suProcess;
      String retstr;
      
      
      // Instance of shell class
      Shell shell = new Shell();
      
      try {
    	  retval = shell.sudo("id");
      } 
      
      catch (ShellException e) {
    	  // TODO Auto-generated catch block
    	  e.printStackTrace();
      }            

      if (true == retval.contains("uid=0"))
    	  retstr = "Yes ROOTED! (uid == 0)";
      else
    	  retstr = "NOT ROOTED!";
      
      return retstr;     
    }
    
    
    public static String canRunRootOtherCommands(String command)
    {               
      // Instance of shell class
      Shell shell = new Shell();
      
      try {
    	  shell.sudo(command);
      } 
      
      catch (ShellException e) {
    	  // TODO Auto-generated catch block
    	  e.printStackTrace();
      }       
      return "Cmd executed!";     
    }
    
    
    
    public String getCommand() {
        return command;
    }

    public String getStdout() {
        return stdout;
    }

    public String getStderr() {
        return stderr;
    }

    public int getRetvalue() {
        return retvalue;
    }

}
